/******************************************************************************
 * This file is part of the Gluon Development Platform
 * Copyright (c) 2011 Laszlo Papp <djszapi@archlinux.us>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#ifndef LIBQGIT2_SIGNATURE_H
#define LIBQGIT2_SIGNATURE_H

#include "../libqgit2_export.h"

#include <QtCore/QString>
#include <QtCore/QDateTime>

struct git_signature;

namespace LibQGit2
{
    /**
     * @brief This class is used for constructing new action signatures, e.g. when creating commits.
     *
     * The underlaying data structure is owned by the object, and deleted when the object is
     * destroyed.
     *
     * The interface provided by this class is identical to QGitSignature, with additional
     * constructors for creating new signatures.
     *
     * @ingroup LibQGit2
     * @{
     */
    class LIBQGIT2_SIGNATURE_EXPORT QGitSignatureBuilder
    {
        public:

            /**
             * Construct a new action signature.
             *
             * @param name name of the person
             * @param email email of the person
             * @param dateTime time when the action happened
             * @throws QGitException
             */
            QGitSignatureBuilder(const QString& name, const QString& email, QDateTime dateTime);

            /**
             * Construct a new action signature, using the `now` datetime generated by the
             * underlaying library.
             *
             * @param name name of the person
             * @param email email of the person
             * @throws QGitException
             */
            QGitSignatureBuilder(const QString& name, const QString& email);

            /**
             * Construct a copy of an existing signature.
             *
             * All internal strings are also duplicated.
             *
             * @param other signature to duplicated
             */
            QGitSignatureBuilder(const QGitSignatureBuilder& other);

            /**
             * Delete an existing signature
             */
            ~QGitSignatureBuilder();

            /**
             * Return the 'name' from this signature
             */
            QString name() const;

            /**
             * Return the 'email' from this signature
             */
            QString email() const;

            /**
             * Return the time stamp from this signature
             */
            QDateTime when() const;

            const git_signature* data() const;

        private:
            git_signature *d;
    };

    /**@}*/

    /**
     * @brief This class provides a thin wrapper around an existing signature data structure.
     *
     * An instance of this class does not own the underlaying data structure, only a reference
     * (pointer) to it.
     *
     * Use QGitSignatureBuilder to create new signatures.
     *
     * @ingroup LibQGit2
     * @{
     */
    class LIBQGIT2_SIGNATURE_EXPORT QGitSignature
    {
        public:

            /**
             * Create a reference to the 'signature'; ownership of the pointer is not transferred.
             */
            explicit QGitSignature(const git_signature *signature = 0);

            /**
             * Create another reference to the signature referenced by 'other'
             */
            QGitSignature(const QGitSignature& other);

            /**
             * Create a reference to the signature owned by 'other'; this allows QGitSignatureBuilder to
             * be passed as QGitSignature function argument.
             */
            QGitSignature(const QGitSignatureBuilder& other);

            /**
             * Destroy the reference; does not destroy the underlaying data structure,
             * because it's not owned by this reference
             */
            ~QGitSignature();

            /**
             * Return the 'name' from this signature
             */
            QString name() const;

            /**
             * Return the 'email' from this signature
             */
            QString email() const;

            /**
             * Return the time stamp from this signature
             */
            QDateTime when() const;

            const git_signature *data() const;

        private:
            const git_signature *d;
    };

    /**@}*/
}

#endif // LIBQGIT2_SIGNATURE_H
